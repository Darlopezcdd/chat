@model Chat.Mvc.Models.ChatViewModel
<div class="chat-container">
    <div class="sidebar">
        <h4>Seleccionar Usuario Activo</h4>
        <form asp-action="Index" method="get">
            <div class="form-group">
                <label for="userId">Usuario Activo:</label>
                <select name="usuarioActivoId" class="form-control" onchange="this.form.submit()">
                    @foreach (var user in Model.Usuarios)

                    {

                        if (user.Id == Model.UsuarioActivoId)

                        {
                            <option value="@user.Id" selected>@user.Name</option>
                        }

                        else

                        {
                            <option value="@user.Id">@user.Name</option>
                        }

                    }
                </select>
            </div>
        </form>

        <h4>Chats</h4>
        <ul>
            @foreach (var user in Model.Usuarios.Where(u => u.Id != Model.UsuarioActivoId))
            {
                <li>
                    <a href="@Url.Action("Index", "Mensajes", new { usuarioActivoId = Model.UsuarioActivoId, usuarioSeleccionadoId = user.Id })">
                        @user.Name
                    </a>
                </li>
            }

            <h5>Grupos</h5>
            @if (!Model.Grupos.Any())
            {
                <div class="alert alert-info">
                    No hay grupos disponibles en este momento.
                </div>
            }
            else
            {
                <ul>
                    @foreach (var grupo in Model.Grupos)
                    {
                        <li>
                            <a href="@Url.Action("Index", "Mensajes", new { usuarioActivoId = Model.UsuarioActivoId, grupoId = grupo.Id })">
                                @grupo.Name
                            </a>
                        </li>
                    }
                </ul>
            }
        </ul>
    </div>

    <div class="chat-messages">
        @{
            Func<string, bool> esImagen = url =>

            {

                var extensionesValidas = new[] { ".jpg", ".jpeg", ".png", ".gif" };

                return !string.IsNullOrEmpty(url) && extensionesValidas.Any(e => url.EndsWith(e, StringComparison.OrdinalIgnoreCase));

            };
        }

        <div class="messages">
            @if (!Model.Mensajes.Any())
            {
                <div class="alert alert-warning">
                    No hay mensajes para mostrar.
                </div>
            }
            else
            {
                <ul>
                    @foreach (var mensaje in Model.Mensajes)
                    {

                        var esRemitente = mensaje.NombreRemitente == Model.Usuarios.FirstOrDefault(u => u.Id == Model.UsuarioActivoId)?.Name;

                        <div class="message @(esRemitente ? "sent" : "received")">
                            <div class="message-content">
                                <p>@mensaje.Contenido</p>
                                @if (!string.IsNullOrEmpty(mensaje.UrlArchivo))

                                {
                                    @if (esImagen(mensaje.UrlArchivo))
                                    {
                                        <img src="@mensaje.UrlArchivo" alt="Imagen Adjunta" class="message-image" />
                                    }
                                    else
                                    {
                                        <a href="@mensaje.UrlArchivo" target="_blank" class="message-file">Descargar Archivo</a>
                                    }
                                }
                                <span class="message-time">@mensaje.FechaEnvio</span>
                            </div>
                        </div>
                    }
                </ul>
            }
        </div>
        <div class="message-input">
            <form asp-action="Create" method="get">
                <input type="hidden" name="UserRemitenteId" value="@Model.UsuarioActivoId" />
                <button type="submit">Enviar</button>
            </form>
        </div>
    </div>

   
</div>

@section Scripts {
    <script>
        const messagesDiv = document.querySelector('.messages');
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    </script>
}

<style>
    .chat-container {
        display: flex;
        height: 90vh;
        border: 1px solid #ccc;
        border-radius: 10px;
        overflow: hidden;
        font-family: Arial, sans-serif;
    }

    .sidebar {
        width: 30%;
        background: #f8f9fa;
        padding: 15px;
        border-right: 1px solid #ccc;
        overflow-y: auto;
    }

    .chat-messages {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: #ffffff;
        overflow-y: auto;
        position: relative;
    }

    .messages {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .message {
        position: relative;
        max-width: 50%;
        padding: 15px;
        border-radius: 25px;
        margin-bottom: 10px;
        word-wrap: break-word;
    }

        .message.sent {
            background-color: #007bff;
            color: white;
            margin-left: auto; 
        }

        .message.received {
            background-color: #e9ecef;
            color: black;
            margin-right: auto; 
        }

    .message-content {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .message.sent .message-time {
        color: white; 
    }

    .message-image {
        border-radius: 10px;
        max-width: none; 
        max-height: none;
        width: auto;
        height: auto; 
    }

    .message-file, .message-image {
        margin-top: 5px;
    }

    .message-content > :not(:last-child):not(.message-file):not(.message-image) {
        margin-bottom: 0;
    }

    .message-content .message-time {
        margin-top: 5px; 
    }
    .message-file {
        color: #007bff;
        text-decoration: none;
        font-size: 14px;
    }

        .message-file:hover {
            text-decoration: underline;
        }

    .message-time {
        font-size: 12px;
        color: gray;
        text-align: right;
    }

    .message-input {
        display: flex;
        padding: 11px;
        background: #f8f9fa;
        border-top: 1px solid #ccc;
    }

        .message-input button {
            flex: 1;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            margin-right: 10px;
        }

            .message-input button:hover {
                padding: 10px 20px;
                border: none;
                background: #007bff;
                color: white;
                border-radius: 5px;
            }
</style>
